// Generated by gencpp from file environment/env_state_msg.msg
// DO NOT EDIT!


#ifndef ENVIRONMENT_MESSAGE_ENV_STATE_MSG_H
#define ENVIRONMENT_MESSAGE_ENV_STATE_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace environment
{
template <class ContainerAllocator>
struct env_state_msg_
{
  typedef env_state_msg_<ContainerAllocator> Type;

  env_state_msg_()
    : state()
    , done(0)  {
    }
  env_state_msg_(const ContainerAllocator& _alloc)
    : state(_alloc)
    , done(0)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _state_type;
  _state_type state;

   typedef int32_t _done_type;
  _done_type done;




  typedef boost::shared_ptr< ::environment::env_state_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::environment::env_state_msg_<ContainerAllocator> const> ConstPtr;

}; // struct env_state_msg_

typedef ::environment::env_state_msg_<std::allocator<void> > env_state_msg;

typedef boost::shared_ptr< ::environment::env_state_msg > env_state_msgPtr;
typedef boost::shared_ptr< ::environment::env_state_msg const> env_state_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::environment::env_state_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::environment::env_state_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace environment

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': False, 'HasHeader': False}
// {'environment': ['/home/utra-art/soccer-rl/ROS_ws/src/environment/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::environment::env_state_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::environment::env_state_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::environment::env_state_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::environment::env_state_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::environment::env_state_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::environment::env_state_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::environment::env_state_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "de894b6244ba540635bdca80d7623753";
  }

  static const char* value(const ::environment::env_state_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xde894b6244ba5406ULL;
  static const uint64_t static_value2 = 0x35bdca80d7623753ULL;
};

template<class ContainerAllocator>
struct DataType< ::environment::env_state_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "environment/env_state_msg";
  }

  static const char* value(const ::environment::env_state_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::environment::env_state_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] state\n\
int32 done\n\
";
  }

  static const char* value(const ::environment::env_state_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::environment::env_state_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.done);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct env_state_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::environment::env_state_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::environment::env_state_msg_<ContainerAllocator>& v)
  {
    s << indent << "state[]" << std::endl;
    for (size_t i = 0; i < v.state.size(); ++i)
    {
      s << indent << "  state[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.state[i]);
    }
    s << indent << "done: ";
    Printer<int32_t>::stream(s, indent + "  ", v.done);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ENVIRONMENT_MESSAGE_ENV_STATE_MSG_H
